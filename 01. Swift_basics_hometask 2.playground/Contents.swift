import UIKit
import Darwin.C.math // Библиотека, которая поможет Вам выполнять сложные математические операции.

// MARK: - Task 1.
//:  Объявите переменные a и b целочисленного типа данных и присвойте им значения 2 и 3.
//: Вычислите значение уравнения (a+4b) * (a–3b) и выведите результат на консоль.
// Решение оформите ниже



// MARK: не нужно объявлять var, если значение не изменяется. Лучше объявлять let, потому что для него меньше памяти выделяется :)
//let a = Int(2)
//let b = Int(3)
//
//let result = (a + 43) * (a - 33)
// 
//print(result)
//

// MARK: - Task 2.
////: Объявите переменные c и d присвойте им значения 2.75 и 4.25.
////: Вычислите значение уравнения 2 x (c+1) + 3 x (d+1) и выведите результат на консоль.
//// Решение оформите ниже
//let c = Double(2.75)
//let d = Double(4.25)
//
//let meaning = 2 * (c + 1) + 3 * (d + 1)
//
//print(meaning)


// MARK: - Task 3.
//: Объявите переменную и запишите в нее название текущую дату.
//: Объявите переменную и запишите в нее название текущего месяца.
//: Объявите переменную и запишите в нее текущий год.
//: Выведите на консоль текущую дату в формате ГОД  МЕСЯЦ  ДЕНЬ, используя данные, записанные в объявленные ранее переменные.
// Решение оформите ниже


// MARK: Для получения текущей даты (чтобы всегда была текущая дата) можно использовать Date()
        // Получаем текущую дату
        // let currentDate = Date()
        // Создаем форматтер для извлечения информации о дате
        // let dateFormatter = DateFormatter()
        // Дальше задаешь необходимый формат даты и выводишь его
//let Data  = "Data"
//let Month = "Month"
//let Year  = "Year"
//print(currentYear, currentMonth, currentData)

//В сети нашел пример, от которого смог отталкнуться и получилось вот так, конечно не уверен что именно так нужно было
let currentDate = Date()
let dateFormatter = DateFormatter()
let year = dateFormatter.string(from: currentDate)

dateFormatter.dateFormat = "MMMM"
let month = dateFormatter.string(from: currentDate)

dateFormatter.dateFormat = "yyyy MMMM d"
let formatedDate = dateFormatter.string(from: currentDate)

print("Текущая дата: \(formatedDate)")


// MARK: - Task 4.
//: Объявите две целочисленные однотипные переменные. Тип данных первой должен быть задан неявно, а второй — явно.
//: Затем - поменяйте значения переменных местами. Для этого вам придется использовать дополнительную переменную, которая будет служить буфером.
//: Выведите получившиеся значения на консоль. В каждом варианте выводимых данных текстом напишите, какую переменную вы хотите вывести.
// Решение оформите ниже

//var markOne = Double()
//var markTwo = Double(3.14159111111)
//
//var markThree =
//
//print(markThree)


// MARK: Как пример - объявление явно/неявно переменных, глядя на то, как закоменченый код был написан
var firstVariable: Int = 5 // Явное задание типа
var secondVariable = 10     // Неявное задание типа
var buffer = firstVariable
firstVariable = secondVariable
secondVariable = buffer

print("Первая переменная: \(firstVariable)")
print("Вторая переменная: \(secondVariable)")


// MARK: - Task 5.
//: Объявите три пустые константы: одну типа Int, одну типа Float и одну типа Double.
//: Проинициализируйте для них следующие значения: Int — 18, Float — 16.4, Double — 5.7.
//: Затем найдите сумму всех трех констант и запишите ее в переменную типа Float.
//: Найдите произведение всех трех констант и запишите его в переменную типа Int. Помните, что вам необходимо получить результат с минимальной погрешностью.
//: Найдите остаток от деления константы типа Float на константу типа Double и запишите ее в переменную типа Double.
//: Выведите на консоль все три результата с использованием поясняющего текста (любого).
// Решение оформите ниже


// MARK: так переменные никогда не пишутся. По стилям между типом переменной и знаком равно -> ОДИН пробел
//Исправил
let one: Int = 18
let two: Float = 16.4
let three: Double = 5.7

var anotherSumm: Float = Float(one) + two + Float(three)
var increase: Int = one * Int(two) * Int(three)
var division: Double = Double(two) / three

print(anotherSumm, increase, division)


// MARK: - Task 6
//: Определите нечетное число
//: Из двух случайных чисел, одно из которых четное, а другое нечетное
// Выведите в консоль нечетное


// MARK: по-моему тут четные ищутся? Плюс надо из двух рандомных чисел. Рандомное число можно найти так: Int.random(in: 1...100)
// MARK: должен быть не массив, а два числа. Дальше проверку делаешь

//Исправил, немного пришлось подумать, как сделать правильно проверку
let targetOne = Int.random(in: 1...100) * 2
let targetTwo = Int.random(in: 1...100) * 2 + 1

if ((targetOne % targetTwo ) == 1) {
    print("Четное: \(targetOne)")
} else {
    print("Нечетное: \(targetTwo)")
}


// MARK: - Task 7
//: Найдите среднее число из 3 чисел
//: Вводятся три разных числа. Определите, какое из них является средним (больше одного, но меньше другого).
// Результат выведите в консоль
// Сделайте это для разных числовых типов
let rectangleA = 112
let rectangleB = 111
let rectangleC = 100


// MARK: подозреваю, что задание не понято верно. Нужно принтануть одно значение, которое будет средним
//Блин, пришлось попотеть чтобы найти более простой способ, смотрю на предыдущий и понимаю какой же он грамоздкий хоть и работает)

let median = [rectangleA, rectangleB, rectangleC].sorted()[1]
print("Среднее число: \(median)")


if ((rectangleA > rectangleB) && (rectangleA < rectangleC)) || ((rectangleA < rectangleB) && (rectangleA > rectangleC)) {
    print(rectangleA)
} else {
    if ((rectangleB > rectangleA) && (rectangleB < rectangleC)) || ((rectangleB < rectangleA) && (rectangleB > rectangleC)) {
        print(rectangleB)
    } else {
        print(rectangleC)
    }
}


// MARK: - Task 7
//: Переведите байты в килобайты, мегабайты, гигабайты
//: Пользователь вводит число и выбирает, в какую величину необходимо выполнить перевод
// Результат выведите в консоль вместе в сокращенным значением величины (КБ / МБ / ГБ)
// Подумайте на самым рациональным и емким решением

var bt = Int(10)

var cb: Double = Double(bt) / 1024
print(cb,"КБ")
var mb: Double = Double(bt) / 1048576
print(mb, "МБ")
var gb: Double = Double(bt) / 1073741824
print(gb, "ГБ")


// MARK: - Task 8
// Проверка делимости одного числа на другое
//: Вводятся два целых числа.
//: Проверьте, делится ли первое число на второе.
// Результат выведите в консоль
// В ответ включите сам результат и остаток от деления (если он есть).
var pointOne = 191
var pointTwo = 25
var pointThree = Double(pointOne) / Double(pointTwo)
// MARK: - не нужно так мгного скобок, свифт поймет и (pointOne / pointTwo) != 0
if pointOne / pointTwo != 0 {
    // MARK: тут выводится только целая часть, а отстатка нет
    print(pointThree)
}
// MARK: вот как надо
let divisionResult = pointOne / pointTwo
let remainder = pointOne % pointTwo

if remainder == 0 {
    print("\(pointOne) делится на \(pointTwo) без остатка, результат деления: \(divisionResult)")
} else {
    print("\(pointTwo) не делится на \(pointTwo) без остатка. Результат деления: \(divisionResult), остаток: \(remainder)")
}


// MARK: - Task 9
// Решите квадратное уравнение произвольного типа
// Конкретное квадратное уравнение определяется коэффициентами a, b, c, которые вводит пользователь.
// При решение задачи обратите внимание на грамотное использование констант и переменных
//: 1. Выведите в консоль текстом получившееся уравнение
//: 2. Найти корни квадратного уравнения и вывести их на экран, если они есть.
//: 3. Если корней нет, то вывести сообщение об этом.
// Результат в консоль

//Квадратное уравнение -> AX^2 + BX + C = 0
//Нашел пример на кодворс и уже от него отталкивался, сам не смог сделать

//let a = 1
//let b = 8
//let c = 6
//
//// Выводим получившееся уравнение на консоль
//print("Уравнение: \(a)x^2 + \(b)x + \(c) = 0")
//
//// Вычисление дискриминанта
//let discriminant = b * b - 4 * a * c
//
//// Проверка дискриминанта и нахождение корней
//if discriminant > 0 {
//    let x1 = (-b + (discriminant)) / (2 * a)
//    let x2 = (-b - (discriminant)) / (2 * a)
//    print("Корни уравнения: x1 = \(x1), x2 = \(x2)")
//} else if discriminant == 0 {
//    let x = -b / (2 * a)
//    print("Уравнение имеет единственный корень: x = \(x)")
//} else {
//    print("Уравнение не имеет действительных корней")
//}

